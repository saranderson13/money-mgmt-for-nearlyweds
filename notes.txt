TO DO: 

WEDNESDAY 12/11:
[x] Finish taking notes from JWT Walkthrough 1
[x] Finish mapping out associations
[x] Create repo + Front/Backend Directories
[x] Generate backend api

THURSDAY 12/12:
[x] Set up Gemfile
[x] Create all models (except maybe colors?)
[x] Add some methods for accessing distinct users
[x] Create some seed data
[x] Test all associations
[x] Set up error handling in Application Controller
[x] Create app/errors directory & AuthorizationError class
[x] Add authorization and signup spec files


FRIDAY 12/13
[x] Finish setting up Fabrication Gem


SATURDAY 12/14
[x] Rspec tests for Authorization (login/logout) (all passing)
[x] Rspec tests for Signup (all passing)


MONDAY 12/16
[x] Rspec tests for owned object (authorized creation/editing) (all passing)
[x] Token creation and blacklisting testing in browser (no cors errors)
[x] Lingering 201 error

TUESDAY 12/17
[x] Create signup page

WEDNESDAY 12/18
[x] Debug signup page js
[ ] Alter user class to have first & last name, not just name
[ ] Enable actual signup
[ ] Create login page
[ ]
[ ]
[ ]
[ ]
[ ]
[ ]
[ ]
[ ]
[ ]
[ ]
[ ]
[ ]


BROWSER TESTING OF GETTING A TOKEN (WITH LOGIN)
const url = 'http://localhost:3000/login'
undefined

const params = { user: { email: 'sarah@example.com', password: 'sto0fski' } }
undefined

const res = await fetch(url, { method:'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(params) })
undefined

res.headers.get('authorization')
"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwic2NwIjoidXNlciIsImF1ZCI6bnVsbCwiaWF0IjoxNTc2NTI5MzA0LCJleHAiOjE1NzY2MTU3MDQsImp0aSI6IjBjMTc3NzNmLWQ2ZGItNDFiMi1iYzgxLTQyZTgxMTVkYzljZCJ9.epwaL3zXFDldVrFacrZ1NUYeETrZBn7Rut7aH1IN2LY"





SIGNUP FETCH REQUEST EXAMPLE
const resp = fetch('http://localhost:3000/signup', {
    method: "POST",
    headers: { 
        "Accept": "application/json",
        "Content-Type": "application/json"
    },
    body: JSON.stringify({
		user: {
            first_name: "Sarah",
            last_name: "Anderson",
            role: "Bride",
            email: "sarah@example.com",
            password: "password",
        },
        wedding: {
            date: "2021-05-15",
			website: "anderson-bailey-wedding.com",
			registry: "anderson-bailey-registry.com",
			guest_count: 200
        }
    })
})

const resp2 = fetch('http://localhost:3000/signup', {
    method: "POST",
    headers: { 
        "Accept": "application/json",
        "Content-Type": "application/json"
    },
    body: JSON.stringify({
		user: {
            first_name: "Cameron",
            last_name: "Bailey",
            role: "Groom",
            email: "cameron@example.com",
            password: "password",
        },
        partner: {
            email: "sarah@example.com"
        }
    })
})



STEPS FOR CREATING A NEW PAGE:
01. Create the page manager:
    IN TERMINAL: touch src/pageManagers/[_pageName_].js
    IN FILE:
        class [_PageName_]Page extends PageManager {

            constructor(container, adapter) {
                super(container)
                this.adapter = new [_PageName_]Adapter(adapter);
            }

            initBindingsAndEventListeners() {
                [Find and add event listeners to any elements here]
                [NOTE: only for elements in the staticHTML]
                [      dynamic ones will need to be set later]
            }

            get staticHTML() {
                return (`
                    [Insert Static HTML Here]
                `)
            }
        }

02. Create the page adapter:
    IN TERMINAL: touch src/adapters/decorators/[_pageName_]Adapter.js
    IN FILE:
        class [_PageName_]Adapter {

            constructor(baseAdapter){
                this.baseAdapter = baseAdapter
                this.baseURL = this.baseAdapter.baseURL
            }

            get token() {
                return this.baseAdapter.token;
            }

            get headers() {
                return this.baseAdapter.headers;
            }
        }

03. Add adapter and page manager to index.html
04. Add route into app.js constructor




























